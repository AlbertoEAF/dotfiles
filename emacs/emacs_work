;; Ryan emacs

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#26292c" "#ff4a52" "#40b83e" "#f6f080" "#afc4db" "#dc8cc3" "#93e0e3" "#f8f8f8"])
 '(bongo-enabled-backends (quote (C:Program Files (x86) VideoLANVLCvlc\.exe)))
 '(column-number-mode t)
 '(custom-enabled-themes (quote (smart-mode-line-dark)))
 '(custom-safe-themes
   (quote
    ("3ff96689086ebc06f5f813a804f7114195b7c703ed2f19b51e10026723711e33" "a0feb1322de9e26a4d209d1cfa236deaf64662bb604fa513cca6a057ddf0ef64" "c70799e6420521bdd782842cd38ed9d18ba221ca294098f786e2c4ca4b2e9521" "b9183de9666c3a16a7ffa7faaa8e9941b8d0ab50f9aaba1ca49f2f3aec7e3be9" "0c311fb22e6197daba9123f43da98f273d2bfaeeaeb653007ad1ee77f0003037" "5e3fc08bcadce4c6785fc49be686a4a82a356db569f55d411258984e952f194a" "8d6fb24169d94df45422617a1dfabf15ca42a97d594d28b3584dc6db711e0e0b" "7153b82e50b6f7452b4519097f880d968a6eaf6f6ef38cc45a144958e553fbc6" "ea489f6710a3da0738e7dbdfc124df06a4e3ae82f191ce66c2af3e0a15e99b90" "18a33cdb764e4baf99b23dcd5abdbf1249670d412c6d3a8092ae1a7b211613d5" "0ba649556dc51762e6794b92017f6f7406754ae3136eafef686d81c6da176cc5" "96998f6f11ef9f551b427b8853d947a7857ea5a578c75aa9c4e7c73fe04d10b4" "0c29db826418061b40564e3351194a3d4a125d182c6ee5178c237a7364f0ff12" "987b709680284a5858d5fe7e4e428463a20dfabe0a6f2a6146b3b8c7c529f08b" "46fd293ff6e2f6b74a5edf1063c32f2a758ec24a5f63d13b07a20255c074d399" "3cd28471e80be3bd2657ca3f03fbb2884ab669662271794360866ab60b6cb6e6" "1a85b8ade3d7cf76897b338ff3b20409cb5a5fbed4e45c6f38c98eee7b025ad4" "58c6711a3b568437bab07a30385d34aacf64156cc5137ea20e799984f4227265" "3d5ef3d7ed58c9ad321f05360ad8a6b24585b9c49abcee67bdcbb0fe583a6950" "b3775ba758e7d31f3bb849e7c9e48ff60929a792961a2d536edec8f68c671ca5" "7bde52fdac7ac54d00f3d4c559f2f7aa899311655e7eb20ec5491f3b5c533fe8" "ad9fc392386f4859d28fe4ef3803585b51557838dbc072762117adad37e83585" "8cf56691a70156f611ac86d0bbcbc7dee7673df195de5918f34bfdc6814ffd39" "c5a044ba03d43a725bd79700087dea813abcb6beb6be08c7eb3303ed90782482" "588b1ec3f63dfbd7ab2ba7eda4b1b6009dd1c8ed6a321fa98c492d8a63f1bba7" "e8825f26af32403c5ad8bc983f8610a4a4786eb55e3a363fa9acb48e0677fe7e" "cdd26fa6a8c6706c9009db659d2dffd7f4b0350f9cc94e5df657fa295fffec71" "ab04c00a7e48ad784b52f34aa6bfa1e80d0c3fcacc50e1189af3651013eb0d58" "04dd0236a367865e591927a3810f178e8d33c372ad5bfef48b5ce90d4b476481" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "764e3a6472a3a4821d929cdbd786e759fab6ef6c2081884fca45f1e1e3077d1d" "08efabe5a8f3827508634a3ceed33fa06b9daeef9c70a24218b70494acdf7855" "7997e0765add4bfcdecb5ac3ee7f64bbb03018fb1ac5597c64ccca8c88b1262f" "28ec8ccf6190f6a73812df9bc91df54ce1d6132f18b4c8fcc85d45298569eb53" "6d52f427961f4ba24777b23234ac3c84dc671d2c691d4741b38f205ed8f1ed70" "e56f1b1c1daec5dbddc50abd00fcd00f6ce4079f4a7f66052cf16d96412a09a9" "2a12e95e9ee6ed57592e7df12f3f028205575e9b3affdb5e6fa589421c618136" "312b0e18c0ed8fa54ab3cb20484a01c2a6c5a9a0f2d9da712de3ad0b0f981b38" "3cc2385c39257fed66238921602d8104d8fd6266ad88a006d0a4325336f5ee02" "e9776d12e4ccb722a2a732c6e80423331bcb93f02e089ba2a4b02e85de1cf00e" "cc0dbb53a10215b696d391a90de635ba1699072745bf653b53774706999208e3" "c739f435660ca9d9e77312cbb878d5d7fd31e386a7758c982fa54a49ffd47f6e" "62c9339d5cac3a49688abb34e98f87a6ee82003a11251f12e0ada1788090c40f" "573e46dadf8c2623256a164831cfe9e42d5c700baed1f8ecd1de0675072e23c2" "7dd515d883520286fc8936ce32381fb01b978d0d7cfb6fe56f7f55d8accbf63a" "f0a99f53cbf7b004ba0c1760aa14fd70f2eabafe4e62a2b3cf5cabae8203113b" "61b188036ad811b11387fc1ef944441826c19ab6dcee5c67c7664a0bbd67a5b5" "3164a65923ef23e0f3dff9f9607b4da1e07ef1c3888d0f6878feef6c28357732" "ed5af4af1d148dc4e0e79e4215c85e7ed21488d63303ddde27880ea91112b07e" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "0e121ff9bef6937edad8dfcff7d88ac9219b5b4f1570fd1702e546a80dba0832" "18e89f93cbaaac214202142d910582354d36639f21f32b04718ca6425dbc82a2" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" default)))
 '(diary-entry-marker (quote font-lock-variable-name-face))
 '(display-time-mode t)
 '(elfeed-feeds
   (quote
    ("http://www.theminimalists.com/feed/" "http://feeds.feedburner.com/StudyHacks" "http://www.rowdykittens.com/feed/" "http://zenhabits.net/feed" "http://sachachua.com/blog/feed/" "http://cmacr.ae/rss.xml")))
 '(emms-mode-line-icon-image-cache
   (quote
    (image :type xpm :ascent center :data "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c #1fb3b3\",
\"# c None s None\",
/* pixels */
\"###...####\",
\"###.#...##\",
\"###.###...\",
\"###.#####.\",
\"###.#####.\",
\"#...#####.\",
\"....#####.\",
\"#..######.\",
\"#######...\",
\"######....\",
\"#######..#\" };")) t)
 '(fci-rule-color "#202325" t)
 '(fringe-mode 6 nil (fringe))
 '(gnus-logo-colors (quote ("#2fdbde" "#c0c0c0")))
 '(gnus-mode-line-image-cache
   (quote
    (image :type xpm :ascent center :data "/* XPM */
static char *gnus-pointer[] = {
/* width height num_colors chars_per_pixel */
\"    18    13        2            1\",
/* colors */
\". c #1fb3b3\",
\"# c None s None\",
/* pixels */
\"##################\",
\"######..##..######\",
\"#####........#####\",
\"#.##.##..##...####\",
\"#...####.###...##.\",
\"#..###.######.....\",
\"#####.########...#\",
\"###########.######\",
\"####.###.#..######\",
\"######..###.######\",
\"###....####.######\",
\"###..######.######\",
\"###########.######\" };")))
 '(hl-paren-background-colors (quote ("#2492db" "#95a5a6" nil)))
 '(hl-paren-colors (quote ("#ecf0f1" "#ecf0f1" "#c0392b")))
 '(initial-scratch-message ";; Ryan's Emacs -- Scratch Buffer")
 '(linum-format (quote dynamic))
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(sml/active-background-color "#34495e")
 '(sml/active-foreground-color "#ecf0f1")
 '(sml/inactive-background-color "#dfe4ea")
 '(sml/inactive-foreground-color "#34495e")
 '(sml/pos-id-separator
   (quote
    (""
     (:propertize " " face powerline-active1)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (car powerline-default-separator-dir)))
		   (quote powerline-active1)
		   (quote powerline-active2))))
     (:propertize " " face powerline-active2))))
 '(sml/pos-minor-modes-separator
   (quote
    (""
     (:propertize " " face powerline-active1)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (cdr powerline-default-separator-dir)))
		   (quote powerline-active1)
		   nil)))
     (:propertize " " face sml/global))))
 '(sml/pre-id-separator
   (quote
    (""
     (:propertize " " face sml/global)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (car powerline-default-separator-dir)))
		   nil
		   (quote powerline-active1))))
     (:propertize " " face powerline-active1))))
 '(sml/pre-minor-modes-separator
   (quote
    (""
     (:propertize " " face powerline-active2)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (cdr powerline-default-separator-dir)))
		   (quote powerline-active2)
		   (quote powerline-active1))))
     (:propertize " " face powerline-active1))))
 '(sml/pre-modes-separator (propertize " " (quote face) (quote sml/modes)))
 '(tool-bar-mode nil)
 '(vc-annotate-background "#1f2124")
 '(vc-annotate-color-map
   (quote
    ((20 . "#ff0000")
     (40 . "#ff4a52")
     (60 . "#f6aa11")
     (80 . "#f1e94b")
     (100 . "#f5f080")
     (120 . "#f6f080")
     (140 . "#41a83e")
     (160 . "#40b83e")
     (180 . "#b6d877")
     (200 . "#b7d877")
     (220 . "#b8d977")
     (240 . "#b9d977")
     (260 . "#93e0e3")
     (280 . "#72aaca")
     (300 . "#8996a8")
     (320 . "#afc4db")
     (340 . "#cfe2f2")
     (360 . "#dc8cc3"))))
 '(vc-annotate-very-old-color "#dc8cc3")
 '(wakatime-api-key "10d02580-d931-4ff6-9c1e-9291a7057ef5")
 '(wakatime-cli-path "c:/Users/rhimmelwright/wakatime-master/wakatime/cli.py")
 '(wakatime-python-bin "C:\\Python34\\python.exe")
 '(when
      (or
       (not
	(boundp
	 (quote ansi-term-color-vector)))
       (not
	(facep
	 (aref ansi-term-color-vector 0))))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; Allegro Common LISP Stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This is sample code for starting and specifying defaults to the
; Emacs-Lisp interface.


(load "c:/acl90.64/eli/fi-site-init.el")

;; A function that will launch acl-smp, but with the path set to a defined project
;; path. If path is lpr file, will open the project. If a project that is not in the
;; list is entered, defaults to the vault folder.
(defun acl-project ()
  "Opens an allegro lisp environment with a default path for a particular project."
  (interactive)
  (let* ((project-src-list
	 '((ggplot "s:/_Vault_Working/Libraries/ggplot/src/development/trunk/GGPLOT.lpr")
	   (pros-edi "S:/_Vault_Working/2-applications/ProsEDICreator/src/development/trunk/pros-edi-creator.lpr")
	   (dset-flis "s:/_Vault_Working/Libraries/DSET-FLIS/src/development/trunk/DSET-FLIS.lpr")
	   (dset-pep "s:/_Vault_Working/Libraries/DSET-PEP/src/development/trunk/DSET-PEP.lpr")
	   (flis-foi "S:/_Vault_Working/Interfaces/flis-foi/src/development/trunk/flis-foi.lpr")
	   (flis-foi-client "S:/_Vault_Working/Interfaces/flis-foi/src/development/trunk/flis-foi-client.lpr")
	   (apex "s:/_Vault_Working/Libraries/AutoPrice Explorer/src/development/Trunk/APEX.lpr")
	   (winstoic-base "s:/_Vault_Working/2-applications/winStoic/winStoic Base/Trunk/winStoicBase.lpr")
	   (2is-apps "C:/2is-apps/")))
	(project-name (read-from-minibuffer "Select Project: "))
	(project-path (second (assoc (intern project-name) project-src-list)))
	(project-dir  (file-name-directory project-path))
	(execute-args (quote ("+B" "+cn"))))

    ;; When project-lpr is specified, add it to args list to load up by default.
    (when (equalp "lpr" (file-name-extension project-path))
      (setf execute-args (concatenate 'list execute-args (list "-project" project-path))))

    ;; Launch ACL Session from emacs
    (fi:common-lisp (format "*common-lisp-%s*" project-name)
     (if project-dir
	 project-dir
       "S:/_Vault_Working/")
     "c:/acl90-smp.64/allegro"
     execute-args
     "localhost"
     nil)))

(defun acl ()
  (interactive)
  (fi:common-lisp
   "*common-lisp*"
   "s:/_Vault_Working"
   "c:/acl90.64/allegro"
   (quote ("+B" "+cn"))
   "localhost"
   nil))

(defun acl-smp ()
  (interactive)
  (fi:common-lisp
   "*common-lisp*"
   "s:/_Vault_Working"
   "c:/acl90-smp.64/allegro"
   (quote ("+B" "+cn"))
   "localhost"
   nil))

(defun mlisp ()
  (interactive)
  (fi:common-lisp
   "*common-lisp*"
   "s:/_Vault_Working"
   "c:/acl90.64/mlisp"
   (quote ("+B" "+cn"))
   "localhost"
   nil))

(defun mlisp-smp ()
  (interactive)
  (fi:common-lisp
   "*common-lisp*"
   "s:/_Vault_Working"
   "c:/acl90-smp.64/mlisp"
   (quote ("+B" "+cn"))
   "localhost"
   nil))

(defun alisp ()
  (interactive)
  (fi:common-lisp
   "*common-lisp*"
   "s:/_Vault_Working"
   "c:/acl90.64/alisp"
   (quote ("+B" "+cn"))
   "localhost"
   nil))

(defun alisp-smp ()
  (interactive)
  (fi:common-lisp
   "*common-lisp*"
   "s:/_Vault_Working"
   "c:/acl90-smp.64/alisp"
   (quote ("+B" "+cn"))
   "localhost"
   nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Allegro Keybindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Uncomment Region  Note: "C-c ;" is already set to comment region in allegro
(global-set-key (kbd "C-c :") 'uncomment-region)
(global-set-key (kbd "C-c p") 'acl-project)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;; Ryan Added
;; lines
(global-linum-mode 1)

;; Menubar
(menu-bar-mode -1)

;; ido mode
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)

;; remove splash screen and use *scratch*
(setq inhibit-startup-message t
inhibit-startup-echo-area-message t)

;; Auto indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Add a load path
;(add-to-list 'load-path "~/.emacs.d/")

;; New line for C-n
(setq net-line-add-newlines t)

;; ido version of imenu bind
(global-set-key (kbd "M-i") 'ido-goto-symbol)


;; Tool Tips in echo area
(tooltip-mode -1)
(setq tooltip-use-echo-area t)

;; Redisplay pause
(setq redisplay-dont-pause t)

;; Backup all files in 1 place.
(setq backup-directory-alist '(("." . "~/owncloud/emacs/backups")))

;; Supercharge recentf
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))




;; Windows Specific ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Launch Emacs in maximized mode in Windows
(defun maximize-frame ()
  "Maximizes the active frame in Windows"
  (interactive)
  ;; Send a `WM_SYSCOMMAND' message to the active frame with the
  ;; `SC_MAXIMIZE' parameter.
  (when (eq system-type 'windows-nt)
    (w32-send-sys-command 61488)))
(add-hook 'window-setup-hook 'maximize-frame t)

;; Move deleted files to trash can
(setq delete-by-moving-to-trash t)


;; Making it more Linux-y

;; Add Cygwin /bin to exec-pathg
(if (file-directory-p "c:/cygwin/bin")
    (add-to-list 'exec-path "c:/cygwin/bin"))

;; set shell to bash
;;(setq shell-file-name "bash")
;;(setq explicit-shell-file-name shell-file-name)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Org-Mode Global list of my TODOs
(setq org-agenda-files (list "~/owncloud/emacs/org/work.org"
                             "~/owncloud/emacs/org/homeorg"
                             "~/owncloud/emacs/org/me.org"))
(global-set-key (kbd "C-c o")
		(lambda() (interactive) (find-file "~/owncloud/emacs/org/me.org")))

;; Setup my basic default work environment
(defun setup-work-environment ()
  ;; Split Windows
  (split-window-right)
  (split-window-below)
  (find-file "~/owncloud/emacs/org/me.org")
  (find-file "~/owncloud/emacs/org/archive/work.org") ;; Open org file
  (interactive)
  (let ((current-prefix-arg 35))
    (call-interactively 'shrink-window-horizontally)) ;; shrink left pane
  (other-window 1)
  (customize-themes) ;; open themes window
  (other-window 1)
  (switch-to-buffer "*scratch*")  ;; open scratch buffer in main pane
  (other-window -1))

(global-set-key (kbd "C-c i") 'setup-work-environment)

;; Add Wrap org-mode code with appropriate code section
(defun org-code (start end)
  (interactive "r")
  (let ((selected-text (buffer-substring (mark) (point)))
	(db-name (read-from-minibuffer "Language: ")))
    (kill-region start end)
    (insert (format "#+BEGIN_SRC %s \n%s \n#+END_SRC" db-name selected-text))))


;; Melpa stuff
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t))

;; Emms Stuff
(require 'emms-setup)
(emms-standard)
(emms-default-players)

;; Load Smart-mode-line
(sml/setup)

;; Monitor thing
(require 'symon)
;;(symon-mode)

;; w3m stuff
(eval-after-load 'w3m
  '(progn
     (define-key w3m-mode-map "q" 'w3m-previous-buffer)
     (define-key w3m-mode-map "w" 'w3m-next-buffer)
     (define-key w3m-mode-map "x" 'w3m-close-window)))

;; Spell Check Word key-binds
(global-set-key (kbd "C-c w") 'ispell-word)
(global-set-key (kbd "C-c r") 'ispell-region)

;; Toggle menubar keybind
(global-set-key (kbd "C-c m") 'menu-bar-mode)

;; Eshell launch keybind
(global-set-key (kbd "C-c t") 'customize-themes)

;; run allegro-common lisp
(global-set-key (kbd "C-c l") 'fi:common-lisp)

;; Previous Window shortcut
(global-set-key (kbd "C-x p")
		(lambda() (interactive) (other-window -1)))

;; Multiple Cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; Weather
(require 'sunshine)
(setq sunshine-location "02703,USA")
(global-set-key (kbd "C-c C-f") 'sunshine-forecast)


;; erc auto login
(setq erc-autojoin-channels-alist
      '(("geekshed.net" "#jupiterbroadcasting")))

;; Logs into IRC
(defun irc ()
  (erc :server "irc.geekshed.net" :port 6667 :nick "himmAllRight17|Work")
  (erc :server "irc.freenode.net" :port 6667 :nick "himmAllRight|W"))

;; Add time
(defun insert-date ()
    (interactive)
    (insert (format-time-string "%A, %B %d" (current-time))))

(global-set-key "\C-c\C-i" 'insert-date)

;; Auto-complete
;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/")
(require 'auto-complete-config)
(ac-config-default)

;; General Auto-complete
(require 'auto-complete-config)
(setq ac-delay 0.0)
(setq ac-quick-help-delay 0.5)
(ac-config-default)
(set-face-background 'ac-selection-face "#007700")

(auto-complete-mode 1)

;; use Shift+arrow_keys to move cursor around split panes
(windmove-default-keybindings)

;; when cursor is on edge, move to the other side, as in a toroidal space
(setq windmove-wrap-around t )

;;(global-wakatime-mode)

;; Default table parameters
(setq org-clock-clocktable-default-properties '(:maxlevel 3 :scope subtree :tags "-Lunch"))


;; Pianobar
;(add-to-list 'load-path "~/.emacs.d/elpa/pianobar-20120128.1301/")
;(autoload 'pianobar "pianobar" nil t)

;; Copy Function
(defun copy (start end)
  (interactive "r")
  (let ((selected-text (buffer-substring (mark) (point))))
    (kill selected-text nil)
    (minibuffer-message selected-text)))



(defun wrap-with-db-connection (start end)
  (interactive "r")
  (let ((selected-text (buffer-substring (mark) (point)))
	(db-name (read-from-minibuffer "DB keyword: ")))
    (kill-region start end)
    (insert (concatenate 'string "(with-db-connection (:" db-name ")
" selected-text "
)"))))


;; Persistent scratch
(persistent-scratch-setup-default)

;; Spotify
(global-set-key (kbd "C-c s") 'helm-spotify)

;; Pretty Lambda
(global-pretty-lambda-mode t)

;; auto-complete
(global-auto-complete-mode t)

;; Save and Restore Window Configuration
(setq zoom-temp-window-configuration nil) ;; set global var to save window state
(defun zoom-window ()
  (interactive)
  (if zoom-temp-window-configuration
      (progn
	(set-window-configuration zoom-temp-window-configuration)
	(setq zoom-temp-window-configuration nil)
	(message "Window un-zoomed"))
    (progn
      (setq zoom-temp-window-configuration (current-window-configuration))
      (delete-other-windows)
      (message "Window zoomed"))))
;; Keybind
(global-set-key (kbd "C-c z") 'zoom-window)


;; proced
(defun proced-settings ()
  (proced-toggle-auto-update))

;; Toggl Comments
(hide/show-comments)
(global-set-key (kbd "C-c C-c") 'hide/show-comments-toggle)

;; Open links on conkeror
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "C:\\Program Files\\conkeror\\conkeror.exe")
