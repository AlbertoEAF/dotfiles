
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; Package Management ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Add Melpa Repos
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  )



;; Ryan Added
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load specific config files
;;(load "~/.emacs_secret")		                     ; Personal stuff
;;(load "~/dotfiles/emacs/emacs_linux")	     ; Linux Specifics
;;(load "~/dotfiles/emacs/emacs_windows")    ; Windows Specifics (Boo)

;; Backup all files in 1 place.
(setq backup-directory-alist '(("." . "~/nextcloud/emacs/backups")))

 ;; Remove splash screen and use *scratch* as home
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)  

;; Load Smart-mode-lines
(require 'smart-mode-line)
(sml/setup)

(setq-default indent-tabs-mode nil)

;; Lines  on
(global-linum-mode 1)

;; Menubar off by default
(menu-bar-mode -1)

;; remove splash screen and use *scratch*
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)

;; Auto indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; New line for C-n
(setq net-line-add-newlines t)

;; Tool Tips in echo area
(tooltip-mode -1)
(setq tooltip-use-echo-area t)

;; Redisplay pause
(setq redisplay-dont-pause t)


;; Stuff to auto find files better
;; ido path completemode
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)

;; ido version of imenu bind
(global-set-key (kbd "M-i") 'ido-goto-symbol)

;; Supercharge recentf
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Org Mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org-Mode Global list of my TODOs
(setq org-agenda-files (list "~/owncloud/emacs/org/work.org"
                             "~/owncloud/emacs/org/homeorg" 
                             "~/owncloud/emacs/org/me.org"))

;; Add Wrap org-mode code with appropriate code section
(defun org-code (start end)
  (interactive "r")
  (let ((selected-text (buffer-substring (mark) (point)))
        (db-name (read-from-minibuffer "Language[common-lisp]: ")))
    (when (eq db-name "")
      (setf db-name "common-lisp"))
    (kill-region start end)
    (insert (format "#+BEGIN_SRC %s \n%s \n#+END_SRC" db-name selected-text))))

;; Default Table Params
(setq org-clock-clocktable-default-properties '(:maxlevel 3 :scope subtree :tags "-Lunch"))

;; Persistent Clocking
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

;; Org Pomodoro ;;
;; Setup pomodoro timer keybind
(global-set-key (kbd "C-S-c C-S-p") 'org-pomodoro)
(global-set-key (kbd "C-S-c C-S-e") 'org-pomodoro-extend-last-clock)

(defun org-pomodoro-get-times ()
  (interactive)
  (message "work length: %s  short break: %s  long break: %s"
           org-pomodoro-length
           org-pomodoro-short-break-length
           org-pomodoro-long-break-length))

(defun org-pomodoro-set-pomodoro ()
  (interactive)
  (setf org-pomodoro-length 35)
  (setf org-pomodoro-short-break-length 9)
  (setf org-pomodoro-long-break-length 15))


(org-pomodoro-set-pomodoro)

(defun org-pomodoro-set-52-17 ()
  (interactive)
  (setf org-pomodoro-length 52)
  (setf org-pomodoro-short-break-length 17)
  (setf org-pomodoro-long-break-length 17))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;; Applications ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Twittering
(require 'twittering-mode)
(setq twittering-use-master-password t)

;; EMMS Multimendia player
(require 'emms-setup)
(emms-standard)
(emms-default-players)

'(elfeed-feeds
   (quote
    ("http://www.theminimalists.com/feed/" "http://feeds.feedburner.com/StudyHacks" "http://www.rowdykittens.com/feed/" "http://zenhabits.net/feed" "zenhabits.net/feed" "http://sachachua.com/blog/feed/")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;; Key Bindings ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; w3m
(eval-after-load 'w3m
  '(progn
     (define-key w3m-mode-map "q" 'w3m-previous-buffer)
     (define-key w3m-mode-map "w" 'w3m-next-buffer)
     (define-key w3m-mode-map "x" 'w3m-close-window)))

;; Spell Check Word key-binds
(global-set-key (kbd "C-c w") 'ispell-word)
(global-set-key (kbd "C-c r") 'ispell-region)

;; Toggle menubar keybind
(global-set-key (kbd "C-c m") 'menu-bar-mode)

;; Eshell launch keybind
(global-set-key (kbd "C-c t") 'eshell)

;; run allegro-common lisp
(global-set-key (kbd "C-c l") 'fi:common-lisp)

;; run elfeed keybind
(global-set-key (kbd "C-c p") 'elfeed)

;; Previous Window shortcut
(global-set-key (kbd "C-x p")
                (lambda() (interactive) (other-window -1)))
(global-set-key (kbd "C-x O")
                (lambda() (interactive) (switch-window)))
(global-set-key (kbd "C-x o")
                (lambda() (interactive) (other-window 1)))
(global-set-key (kbd "C-x \)")
                (lambda() (interactive) (other-frame 1)))
(global-set-key (kbd "C-x 0")
                (lambda() (interactive) (delete-window)))

;;; Programming


;; Cannot get this to work, I think it requires Common Lisp functions... or something
;; Crates a commented code section header
;; (defun create-header (in-string &optional width)
;;   (unless width
;;     (setf width 80))

;;   (let*  ((comment-char ?\;)
;;           (outString (concatenate 'string " " in-string " "))
;;           (side-buffer-count (/ (- width (length outString)) 2))
;;           (middle-line (concatenate 'string
;;                                     (make-string side-buffer-count comment-char)
;;                                     " " in-string " "
;;                                     (make-string
;;                                      (- width (+ side-buffer-count (length outString)))
;;                                      comment-char)))
;;           (buffer (make-string width comment-char)))

;;     (concatenate 'string buffer "\n" middle-line "\n" buffer)))


;; ;; Prompts user for Header text and option width, and inserts header into buffer.
;; (defun insert-header (in-string &optional width)
;;   (interactive "r")
;;   (let ((in-string (read-from-minibuffer "Header Text: "))
;;         (width (read-from-minibuffer "Width (Enter for default [80]): ")))

;;     (if (eq width "")
;;         (setf width 80)
;;       (setf width (string-to-number width)))

;;     (when (> (+ 2 (length in-string)) width)
;;       (error "Error: Header string is too long. String can at max (width - 2) characters long."))

;;     (insert (create-header in-string width))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Helm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'helm)
(require 'helm-config)
(require 'ac-helm)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)

(global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-buffers-list)

(global-set-key (kbd "C-r") 'helm-recentf)
(global-set-key (kbd "C-s") 'helm-swoop)
(global-set-key (kbd "M-s") 'helm-multi-swoop-current-mode)

(helm-autoresize-mode t)

(setq helm-swoop-speed-or-color t)
(set-face-attribute 'helm-selection nil
                    :background "purple"
                    :foreground "white")

;; (global-set-key (kbd "M-i") 'helm-swoop)
 (global-set-key (kbd "M-l") 'helm-multi-swoop)
