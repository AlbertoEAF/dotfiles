(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(column-number-mode t)
 '(compilation-message-face (quote default))
 '(custom-enabled-themes nil)
 '(custom-safe-themes
   (quote
    ("94ba29363bfb7e06105f68d72b268f85981f7fba2ddef89331660033101eb5e5" "d3df47c843c22d8f0177fe3385ae95583dc8811bd6968240f7da42fd9aa51b0b" "54159ea82516378faa7c4d25fb549b843effb1eb932f0925dce1348de7a659ba" "f8f68f14dc4bd60afc74ad0e24149d2ffcb126781beb6d753759b92fd5ff4c26" "3cc2385c39257fed66238921602d8104d8fd6266ad88a006d0a4325336f5ee02" "e9776d12e4ccb722a2a732c6e80423331bcb93f02e089ba2a4b02e85de1cf00e" "cdd26fa6a8c6706c9009db659d2dffd7f4b0350f9cc94e5df657fa295fffec71" "e8825f26af32403c5ad8bc983f8610a4a4786eb55e3a363fa9acb48e0677fe7e" "0a1a7f64f8785ffbf5b5fbe8bca1ee1d9e1fb5e505ad9a0f184499fe6747c1af" "b571f92c9bfaf4a28cb64ae4b4cdbda95241cd62cf07d942be44dc8f46c491f4" "3ed645b3c08080a43a2a15e5768b893c27f6a02ca3282576e3bc09f3d9fa3aaa" "9b402e9e8f62024b2e7f516465b63a4927028a7055392290600b776e4a5b9905" "08851585c86abcf44bb1232bced2ae13bc9f6323aeda71adfa3791d6e7fea2b6" "33bb2c9b6e965f9c3366c57f8d08a94152954d4e2124dc621953f5a8d7e9ca41" "9122dfb203945f6e84b0de66d11a97de6c9edf28b3b5db772472e4beccc6b3c5" "a2e7b508533d46b701ad3b055e7c708323fb110b6676a8be458a758dd8f24e27" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "0251780e8e79d2a5e75eec7ee3b6c646b882495cb884d9dd32f30c60f9d65db6" "f0b0710b7e1260ead8f7808b3ee13c3bb38d45564e369cbe15fc6d312f0cd7a0" "a041a61c0387c57bb65150f002862ebcfe41135a3e3425268de24200b82d6ec9" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "61b188036ad811b11387fc1ef944441826c19ab6dcee5c67c7664a0bbd67a5b5" "573e46dadf8c2623256a164831cfe9e42d5c700baed1f8ecd1de0675072e23c2" "0c29db826418061b40564e3351194a3d4a125d182c6ee5178c237a7364f0ff12" "d143750cb9fadb9ea9a3a27e0632418d2ad09788e115a61a64dd5404fedfe178" "e24180589c0267df991cf54bf1a795c07d00b24169206106624bb844292807b9" "f0a99f53cbf7b004ba0c1760aa14fd70f2eabafe4e62a2b3cf5cabae8203113b" "ef08e77c67344f23154fd8cb9f3b8b1b4bb1799c0bf9d05dfd4b792557e0e401" "7dd515d883520286fc8936ce32381fb01b978d0d7cfb6fe56f7f55d8accbf63a" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "2a12e95e9ee6ed57592e7df12f3f028205575e9b3affdb5e6fa589421c618136" "e56f1b1c1daec5dbddc50abd00fcd00f6ce4079f4a7f66052cf16d96412a09a9" default)))
 '(display-battery-mode t)
 '(display-time-mode t)
 '(elfeed-feeds
   (quote
    ("http://www.theminimalists.com/feed/" "http://feeds.feedburner.com/StudyHacks" "http://www.rowdykittens.com/feed/" "http://zenhabits.net/feed" "http://sachachua.com/blog/feed/" "http://cmacr.ae/rss.xml" "http://ryanhimmelwright.com/feed.xml")))
 '(fci-rule-color "#c7c7c7")
 '(font-use-system-font t)
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-tail-colors
   (quote
    (("#49483E" . 0)
     ("#67930F" . 20)
     ("#349B8D" . 30)
     ("#21889B" . 50)
     ("#968B26" . 60)
     ("#A45E0A" . 70)
     ("#A41F99" . 85)
     ("#49483E" . 100))))
 '(hl-sexp-background-color "#efebe9")
 '(magit-diff-use-overlays nil)
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(send-mail-function (quote smtpmail-send-it))
 '(size-indication-mode t)
 '(sml/pos-id-separator
   (quote
    (""
     (:propertize " " face powerline-active1)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (car powerline-default-separator-dir)))
		   (quote powerline-active1)
		   (quote powerline-active2))))
     (:propertize " " face powerline-active2))))
 '(sml/pos-minor-modes-separator
   (quote
    (""
     (:propertize " " face powerline-active1)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (cdr powerline-default-separator-dir)))
		   (quote powerline-active1)
		   nil)))
     (:propertize " " face sml/global))))
 '(sml/pre-id-separator
   (quote
    (""
     (:propertize " " face sml/global)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (car powerline-default-separator-dir)))
		   nil
		   (quote powerline-active1))))
     (:propertize " " face powerline-active1))))
 '(sml/pre-minor-modes-separator
   (quote
    (""
     (:propertize " " face powerline-active2)
     (:eval
      (propertize " "
		  (quote display)
		  (funcall
		   (intern
		    (format "powerline-%s-%s" powerline-default-separator
			    (cdr powerline-default-separator-dir)))
		   (quote powerline-active2)
		   (quote powerline-active1))))
     (:propertize " " face powerline-active1))))
 '(sml/pre-modes-separator (propertize " " (quote face) (quote sml/modes)))
 '(tool-bar-mode nil)
 '(vc-annotate-background "#d4d4d4")
 '(vc-annotate-color-map
   (quote
    ((20 . "#437c7c")
     (40 . "#336c6c")
     (60 . "#205070")
     (80 . "#2f4070")
     (100 . "#1f3060")
     (120 . "#0f2050")
     (140 . "#a080a0")
     (160 . "#806080")
     (180 . "#704d70")
     (200 . "#603a60")
     (220 . "#502750")
     (240 . "#401440")
     (260 . "#6c1f1c")
     (280 . "#935f5c")
     (300 . "#834744")
     (320 . "#732f2c")
     (340 . "#6b400c")
     (360 . "#23733c"))))
 '(vc-annotate-very-old-color "#23733c")
 '(weechat-color-list
   (unspecified "#272822" "#49483E" "#A20C41" "#F92672" "#67930F" "#A6E22E" "#968B26" "#E6DB74" "#21889B" "#66D9EF" "#A41F99" "#FD5FF0" "#349B8D" "#A1EFE4" "#F8F8F2" "#F8F8F0"))
 '(when
      (or
       (not
	(boundp
	 (quote ansi-term-color-vector)))
       (not
	(facep
	 (aref ansi-term-color-vector 0))))))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; Package Management ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Add Melpa Repos
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  )



;; Ryan Added
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load specific config files
;;(load "~/dotfiles/emacs/emacs_secret")		                     ; Personal stuff
;;(load "~/dotfiles/emacs/emacs_linux")	     ; Linux Specifics
;;(load "~/dotfiles/emacs/emacs_windows")    ; Windows Specifics (Boo)

;; Backup all files in 1 place.
(setq backup-directory-alist '(("." . "~/owncloud/emacs/backups")))

;; Remove splash screen and use *scratch* as home
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)  

;; Load Smart-mode-lines
					;(require 'smart-mode-line)
;;(sml/setup)

;; Monitor thing
;;(require 'symon)
;;(symon-mode)

;; Lines  on
(global-linum-mode 1)

;; Menubar off by default
(menu-bar-mode -1)

;; Auto indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; New line for C-n
(setq net-line-add-newlines t)

;; Tool Tips in echo area
(tooltip-mode -1)
(setq tooltip-use-echo-area t)

;; Redisplay pause
(setq redisplay-dont-pause t)

;; Stuff to auto find files better
;; ido path completemode
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)

;; ido version of imenu bind
(global-set-key (kbd "M-i") 'ido-goto-symbol)

(setq recentf-auto-cleanup 'never)
(recentf-mode 1)
;; Supercharge recentf
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)


;; enable recent files mode.
(recentf-mode t)

;; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Org Mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org-Mode Global list of my TODOs
(setq org-agenda-files (list "~/owncloud/emacs/org/work.org"
                             "~/owncloud/emacs/org/homeorg" 
                             "~/owncloud/emacs/org/me.org"))

;; Persistent Clocking
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;; Applications ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Twittering
;;(require 'twittering-mode)
;;(setq twittering-use-master-password t)

;; EMMS Multimendia player
;;(require 'emms-setup)
;;(emms-standard)
;;(emms-default-players)

'(elfeed-feeds
  (quote
   ("http://www.theminimalists.com/feed/" "http://feeds.feedburner.com/StudyHacks" "http://www.rowdykittens.com/feed/" "http://zenhabits.net/feed" "zenhabits.net/feed" "http://sachachua.com/blog/feed/")))


;; erc auto login
(require 'erc-image)

(setq erc-autojoin-channels-alist
      '(("geekshed.net" "#jupiterbroadcasting")
	("freenode.net" "#emacs" "reddit-homelab")))

(defun irc ()
  (erc :server "irc.geekshed.net" :port 6667 :nick "himmAllRight")
  (erc :server "irc.freenode.net" :port 6667 :nick "himmAllRight"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;; Key Bindings ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; org-mode open me.org
(global-set-key (kbd "C-c o")
		(lambda () (interactive) (find-file "~/owncloud/emacs/org/archive/me.org")))

(global-set-key (kbd "C-c c") 'irc)

;; w3m
(eval-after-load 'w3m
  '(progn
     (define-key w3m-mode-map "q" 'w3m-previous-buffer)
     (define-key w3m-mode-map "w" 'w3m-next-buffer)
     (define-key w3m-mode-map "x" 'w3m-close-window)))

;; Spell Check Word key-binds
(global-set-key (kbd "C-c w") 'count-words)
(global-set-key (kbd "C-c r") 'ispell-region)

;; Multiple Cursors
;;(require 'multiple-cursors)
;;(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; Toggle menubar keybind
(global-set-key (kbd "C-c m") 'menu-bar-mode)

;; Copy Function
(defun copy (start end)
  (interactive "r")
  (let ((selected-text (buffer-substring (mark) (point))))
    (kill-new selected-text nil)
    (minibuffer-message selected-text)))


(global-set-key (kbd "C-c l") 'copy)

;; Change Theme keybind
(global-set-key (kbd "C-c t") 'customize-themes)

;; run allegro-common lisp
(global-set-key (kbd "C-c l") 'fi:common-lisp)

;; run elfeed keybind
(global-set-key (kbd "C-c p") 'elfeed)

;; Join irc
(global-set-key (kbd "C-c i") 'irc)

;; Magit status
(global-set-key (kbd "C-c g") 'magit-status)


;; Trying to set up mail.
(setq tramp-default-method "ssh")


;; Pianobar setup
(add-to-list 'load-path "~/.emacs.d/elpa/pianobar-20120128.1301/pianobar.el")
(autoload 'pianobar "pianobar" nil t)

::::::::::::::::::::

;; Python setup
;;(require 'python-mode)
; use IPython
;;(setq-default py-shell-name "ipython")
;;(setq-default py-which-bufname "IPython")

; switch to the interpreter after executing code
;;(setq py-shell-switch-buffers-on-execute-p t)
;;(setq py-switch-buffers-on-execute-p t)
; don't split windows
;;(setq py-split-windows-on-execute-p nil)
; try to automagically figure out indentation
;;(setq py-smart-indentation t)


;; Movement shortcuts
(global-set-key (kbd "C-x p")
		(lambda() (interactive) (other-window -1)))
(global-set-key (kbd "C-x O")
		(lambda() (interactive) (switch-window)))
(global-set-key (kbd "C-x o")
		(lambda() (interactive) (other-window 1)))
(global-set-key (kbd "C-x \)")
		(lambda() (interactive) (other-frame 1)))
(global-set-key (kbd "C-x 0")
		(lambda() (interactive) (delete-window)))

; Multiple Cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; General Auto-complete
(require 'auto-complete-config)
(setq ac-delay 0.0)
(setq ac-quick-help-delay 0.5)
(ac-config-default)
(set-face-background 'ac-selection-face "#007700")

;;(persistent-scratch-setup-default)

;; Spotify
(global-set-key (kbd "C-c s") 'helm-spotify)

;; Pretty Lambda
(global-pretty-lambda-mode t)

;; auto-complete
(global-auto-complete-mode t)

;; Save and Restore Window Configuration
(setq zoom-temp-window-configuration nil) ;; set global var to save window state
(defun zoom-window ()
  (interactive)
  (if zoom-temp-window-configuration
      (progn
	(set-window-configuration zoom-temp-window-configuration)
	(setq zoom-temp-window-configuration nil)
	(message "Window un-zoomed"))
    (progn
      (setq zoom-temp-window-configuration (current-window-configuration))
      (delete-other-windows)
      (message "Window zoomed"))))
;; Keybind
(global-set-key (kbd "C-c z") 'zoom-window)


;; Toggl Comments
(hide/show-comments)
(global-set-key (kbd "C-c C-c") 'hide/show-comments-toggle)

;; Open links on conkeror
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "conkeror")

;; indent guide
(indent-guide-global-mode t)
;; smartparens
(smartparens-global-mode t)
(sp-pair "'" nil :actions :rem) ;; removes single quote from auto pairing
(sp-pair "`" nil :actions :rem) ;; removes ` from auto pairing

;; Add Wrap org-mode code with appropriate code section
(defun org-code (start end)
  (interactive "r")
  (let ((selected-text (buffer-substring (mark) (point)))
	(db-name (read-from-minibuffer "Language: ")))
    (kill-region start end)
    (insert (format "#+BEGIN_SRC %s \n%s \n#+END_SRC" db-name selected-text))))

;; Slime SBCL
(add-to-list 'load-path "/usr/share/common-lisp/source/slime/")
(setq inferior-lisp-program "/usr/bin/sbcl")
(require 'slime)
(slime-setup)

(load-theme 'jazz)